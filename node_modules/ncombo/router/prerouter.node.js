var fs = require('fs');
var mime = require('mime');
var path = require('path');

var Prerouter = new (function() {
	var self = this;
	
	self._options = {};
	self._rootDirPath = __dirname + '/../../../';
	
	self._urlToPath = function(url) {
		url = url.replace(/\?.*/, '');
		return path.normalize(self._rootDirPath + url);
	}
	
	self.init = function(options) {
		if(options) {
			var i;
			for(i in options) {
				self._options[i] = options[i];
			}
		}
	}
	
	self._setFileResponseHeaders = function(req, res) {	
		var mimeType;
		
		if(req.rout.mimeType) {
			mimeType = req.rout.mimeType;
		} else {
			mimeType = mime.lookup(req.rout.filePath);
		}
		
		if(self._options.release) {
			var now = new Date();
			var exp = new Date(now.getTime() + self._options.cacheLife);
			
			res.setHeader('Cache-Control', self._options.cacheType);
			res.setHeader('Pragma', self._options.cacheType);
			res.setHeader('Expires', exp.toUTCString());
		} else {
			res.setHeader('Pragma', 'no-cache');
			res.setHeader('Cache-Control', 'no-cache, must-revalidate');
		}
		
		if(req.rout.encoding) {
			res.setHeader('Content-Encoding', req.rout.encoding);
		}
		
		res.setHeader('Content-Type', mimeType);
	}
	
	self.run = function(req, res, next) {		
		if(!req.hasOwnProperty('rout')) {
			req.rout = {};
		}
		req.rout._streams = [];
		req.rout.appendStream = function(stream) {
			req.rout._streams.push(stream);
		}
		req.rout.streamCount = function() {
			return req.rout._streams.length;
		}
		req.rout.getLastStream = function() {
			return req.rout._streams[req.rout._streams.length - 1];
		}
		
		req.rout.filePath = self._urlToPath(req.url);
		var encoding = req.headers['accept-encoding'] || '';
		
		if(encoding.match(/\bgzip\b/)) {
			req.rout.encoding = 'gzip';
		} else if(encoding.match(/\bdeflate\b/)) {
			req.rout.encoding = 'deflate';
		} else {
			req.rout.encoding = '';
		}
		
		self._setFileResponseHeaders(req, res);
		
		next();
	}
})();

module.exports = Prerouter;
