var fs = require('fs'),
	path = require('path'),
	pathManager = require('ncombo/pathmanager'),
	mime = require('mime'),
	less = require('less'),
	wrench = require('wrench'),
	jsp = require("uglify-js").parser,
	pro = require("uglify-js").uglify,
	SmartCacheManager = require("../../../smartcachemanager").SmartCacheManager,
	scriptManager = require('ncombo/scriptmanager'),
	cssBundler = require('css-bundler'),
	cache = require('ncombo/cache');

var Preprocessor = new (function() {
	var self = this;
	
	self._options = {};
	self._protocol = 'http';
	self._releaseMode = false;
	self._cacheLife = 2592000000;
	self._cacheType = 'private';
	self._cacheVersionManager = null;
	
	self.getOptions = function() {
		return self._options;
	}
	
	self.init = function(options) {
		self._options = options;
		self._releaseMode = self._options.release ? true : false;
		
		if(self._releaseMode) {
			self._cacheVersionManager = new SmartCacheManager(self._options.cacheVersion);
		}
		
		if(self._options.protocol) {
			self._protocol = self._options.protocol;
		}
		if(self._options.privateExtensionRegex) {
			self._privateExtension = self._options.privateExtensionRegex;
		}
	}
	
	self._versionDeepCSSURLs = function(content) {
		if(self._releaseMode) {
			content = content.replace(/@import +["']([^"']+)["']/g, function(match, first) {
				return '@import "' + self._cacheVersionManager.setURLCacheVersion(first) + '"';
			});
			
			content = content.replace(/([^A-Za-z0-9]|^)url[(][ ]*["']?([^"')]*)["']?[ ]*[)]/g, function(match, first, second) {
				return first + 'url("' + self._cacheVersionManager.setURLCacheVersion(second) + '")';
			});
		}
		return content;
	}
	
	self.run = function(req, res, next) {
		var buffers = [];
		var ext = scriptManager.getExtension(req.rout.filePath);
		
		if(req.rout.buffer !== null || req.rout.error) {
			if(ext == '.js' && scriptManager.isJSModule(req.url)) {
				req.rout.buffer = new Buffer(scriptManager.moduleWrap(req.url, req.rout.buffer.toString()));
			}
			next();
		} else {
			var lastStream = req.rout.getLastStream();
			
			if((ext == '.js' && scriptManager.isJSModule(req.url)) || ext == '.css' || ext == '.less') {
				lastStream.on('data', function(data) {
					buffers.push(data);
				});
				
				lastStream.on('end', function() {
					var data, buf;
					var resBuffer = Buffer.concat(buffers);
					
					if(ext == '.js') {
						data = scriptManager.moduleWrap(req.url, resBuffer.toString());
						buf = new Buffer(data);
						cache.set('plain:' + req.url, buf);
						req.rout.buffer = buf;
						next();
					} else if(ext == '.less') {
						data = self._versionDeepCSSURLs(resBuffer.toString());
						less.render(data, function (e, css) {
							buf = new Buffer(css);
							cache.set('plain:' + req.url, buf);
							req.rout.buffer = buf;
							next();
						});
					} else {
						data = self._versionDeepCSSURLs(resBuffer.toString());
						buf = new Buffer(data);
						cache.set('plain:' + req.url, buf);
						req.rout.buffer = buf;
						next();
					}
				});
			} else {
				lastStream.on('data', function(data) {
					buffers.push(data);
				});
				
				lastStream.on('end', function() {
					var data, buf;
					var resBuffer = Buffer.concat(buffers);
					
					cache.set('plain:' + req.url, resBuffer);
				});
				
				next();
			}
		}
	}
})();

module.exports = Preprocessor;
