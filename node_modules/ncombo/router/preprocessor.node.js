var fs = require('fs'),
	path = require('path'),
	pathmanager = require('ncombo/pathmanager'),
	mime = require('mime'),
	less = require('less'),
	wrench = require('wrench'),
	jsp = require("uglify-js").parser,
	pro = require("uglify-js").uglify,
	SmartCacheManager = require("../../../smartcachemanager").SmartCacheManager,
	cache = require('ncombo/cache');

var Preprocessor = new (function() {
	var self = this;
	
	self._options = {};
	self._extRegex = /[.][^.]*$/;
	self._protocol = 'http';
	self._releaseMode = false;
	self._cacheLife = 2592000000;
	self._cacheType = 'private';
	self._cacheVersionManager = null;
	self._moduleURLRegex = /^(\/~framework\/client)?\/scripts\//;
	self._mainScriptURL = '/scripts/index.js';
	
	self.getOptions = function() {
		return self._options;
	}
	
	self._isJSModule = function(url) {
		return self._moduleURLRegex.test(url) && url != self._mainScriptURL;
	}
	
	self._moduleWrap = function(moduleName, code) {
		return "(function(exports) { var module = {exports: exports}; " + code + "\n})($loader._modules['" + moduleName + "']);";
	}
	
	self.init = function(options) {
		if(options) {
			self._options = options;
			self._releaseMode = self._options.release ? true : false;
			
			if(self._releaseMode) {
				self._cacheVersionManager = new SmartCacheManager(self._options.cacheVersion);
				
				if(self._options.autoMinify && self._options.minifyURLs) {
					var i, j, url, dir, files, filePath, curFile, curFileURL, data, ext, ast, ugly, stat, modularize;
					for(i in self._options.minifyURLs) {
						url = self._options.minifyURLs[i];
						modularize = self._isJSModule(url);
						filePath = pathmanager.urlToPath(url);
						stat = fs.statSync(filePath);
						if(stat.isDirectory()) {
							files = wrench.readdirSyncRecursive(filePath);
							for(j in files) {
								curFile = filePath + files[j];
								curFileURL = url + files[j];
								ext = curFile.match(self._extRegex);
								ext = ext ? ext[0] : '';
								if(ext == '.js') {
									data = fs.readFileSync(curFile);
									if(modularize) {
										data = self._moduleWrap(curFileURL, data);
									}
									ast = jsp.parse(data.toString());
									ast = pro.ast_mangle(ast);
									ast = pro.ast_squeeze(ast);
									ugly = pro.gen_code(ast);
									cache.set('plain:' + curFileURL, ugly);
								}
							}
						} else if(stat.isFile()) {
							data = fs.readFileSync(filePath);
							if(modularize) {
								data = self._moduleWrap(url, data);
							}
							ast = jsp.parse(data.toString());
							ast = pro.ast_mangle(ast);
							ast = pro.ast_squeeze(ast);
							ugly = pro.gen_code(ast);
							cache.set('plain:' + url, ugly);
						}
					}
				}
			}
			
			if(self._options.protocol) {
				self._protocol = self._options.protocol;
			}
			if(self._options.privateExtensionRegex) {
				self._privateExtension = self._options.privateExtensionRegex;
			}
		}
	}
	
	self._versionDeepCSSURLs = function(content) {
		if(self._releaseMode) {
			content = content.replace(/@import +["']([^"']+)["']/g, function(match, first) {
				return '@import "' + self._cacheVersionManager.setURLCacheVersion(first) + '"';
			});
			
			content = content.replace(/([^A-Za-z0-9]|^)url[(][ ]*["']?([^"')]*)["']?[ ]*[)]/g, function(match, first, second) {
				return first + 'url("' + self._cacheVersionManager.setURLCacheVersion(second) + '")';
			});
		}
		return content;
	}
	
	self.run = function(req, res, next) {
		var buffers = [];
		
		var ext = req.rout.filePath.match(self._extRegex);
		ext = ext ? ext[0] : '';
		
		if(req.rout.buffer || req.rout.error) {
			if(ext == '.js' && self._isJSModule(req.url)) {
				req.rout.buffer = new Buffer(self._moduleWrap(req.url, req.rout.buffer.toString()));
			}
			next();
		} else {	
			var lastStream = req.rout.getLastStream();
			
			if((ext == '.js' && self._isJSModule(req.url)) || ext == '.css' || ext == '.less') {
				lastStream.on('data', function(data) {
					buffers.push(data);
				});
				
				lastStream.on('end', function() {
					var data, buf;
					var resBuffer = Buffer.concat(buffers);
					
					if(ext == '.js') {
						data = self._moduleWrap(req.url, resBuffer.toString());
						buf = new Buffer(data);
						cache.set('plain:' + req.url, buf);
						req.rout.buffer = buf;
						next();
					} else if(ext == '.less') {
						data = self._versionDeepCSSURLs(resBuffer.toString());
						less.render(data, function (e, css) {
							buf = new Buffer(css);
							cache.set('plain:' + req.url, buf);
							req.rout.buffer = buf;
							next();
						});
					} else {
						data = self._versionDeepCSSURLs(resBuffer.toString());
						buf = new Buffer(data);
						cache.set('plain:' + req.url, buf);
						req.rout.buffer = buf;
						next();
					}
				});
			} else {
				lastStream.on('data', function(data) {
					buffers.push(data);
				});
				
				lastStream.on('end', function() {
					var data, buf;
					var resBuffer = Buffer.concat(buffers);
					
					cache.set('plain:' + req.url, resBuffer);
				});
				
				next();
			}
		}
	}
})();

module.exports = Preprocessor;
