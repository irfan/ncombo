var http = require('http'),
	https = require('https'),
	path = require('path'),
	mime = require('mime'),
	fs = require('fs'),
	url = require('url'),
	querystring = require('querystring'),
	ndata = require('ndata'),
	io = require('socket.io'),
	clusterHubStore = new (require('socket.io-clusterhub')),
	conf = require('ncombo/configmanager'),
	gateway = require('ncombo/gateway'),
	handlebars = require('../../framework/libs/handlebars'),
	cache = require('ncombo/cache'),
	ws = require('ncombo/webservice'),
	portScanner = require('portscanner'),
	json = require('json'),
	crypto = require('crypto'),
	stepper = require('stepper');

var cluster = require('cluster');
var numCPUs = require('os').cpus().length;

var SessionEmitter = function(namespace, socket) {
	var self = this;
	self._namespace = namespace;
	self._socket = socket;
	
	self.emit = function(event, data) {
		var eventObject = {
			ns: self._namespace,
			event: event,
			data: data
		}
		
		self._socket.emit('event', eventObject);
	}
	
	self.emitRaw = function(eventData) {
		self._socket.emit('event', eventData);
	}
}

var Session = function(sessionID, socket, dataClient) {
	var self = this;
	self.id = sessionID;
	self._socket = socket;
	self._emitterNamespace = new SessionEmitter('__main', self._socket);
	self._namespaces = {'__main': self._emitterNamespace};
	
	self.emit = function(event, data) {
		self._emitterNamespace.emit(event, data);
	}
	
	self.ns = function(namespace) {
		if(!self._namespaces[namespace]) {
			self._namespaces[namespace] = new SessionEmitter(namespace, self._socket);
		}
		return self._namespaces[namespace];
	}
	
	self.get = function(key, callback) {
		dataClient.get('session' + self.id + '.' + key, callback);
	}
	
	self.set = function(key, value, callback) {
		dataClient.set('session' + self.id + '.' + key, value, callback);
	}
	
	self.remove = function(key, callback) {
		dataClient.remove('session' + self.id + '.' + key, callback);
	}
	
	self._destroy = function(callback) {
		dataClient.remove('session' + self.id, callback);
	}
}

var GlobalEmitter = function(namespace, dataClient) {
	var self = this;
	self._namespace = namespace;
	
	self.broadcast = function(event, data) {
		if(!self._namespace || !event) {
			throw "Exception: One or more required parameters were undefined";
		}
		
		var eventObject = {
			ns: self._namespace,
			event: event,
			data: data
		};
		
		dataClient.get('__opensockets', function(err, sockets) {
			if(err) {
				console.log('   nCombo Error - Failed to get active socket list');
			} else {
				var i;
				for(i in sockets) {
					dataClient.broadcast('session ' + i + '.' + self._namespace + '.' + event, data);
				}
			}
		});
	}
	
	self.emit = function(sessionID, event, data) {
		dataClient.broadcast('session ' + sessionID + '.' + self._namespace + '.' + event, data);
	}
}

var Global = function(dataClient) {
	var self = this;
	self._emitterNamespace = new GlobalEmitter('__main', dataClient);
	self._namespaces = {'__main': self._emitterNamespace};
	
	self._data = {};
	
	self.emit = function(sessionID, event, data) {
		self._emitterNamespace.emit(sessionID, event, data);
	}
	
	self.broadcast = function(event, data) {
		self._emitterNamespace.broadcast(event, data);
	}
	
	self.ns = function(namespace) {
		if(!self._namespaces[namespace]) {
			self._namespaces[namespace] = new GlobalEmitter(namespace, dataClient);
		}
		return self._namespaces[namespace];
	}
	
	self.get = function(key, callback) {
		dataClient.get('global.' + key, callback);
	}
	
	self.set = function(key, value, callback) {
		dataClient.set('global.' + key, value, callback);
	}
	
	self.remove = function(key, callback) {
		dataClient.remove('global.' + key, callback);
	}
}

var ServerRequest = function(socket, request, session, global, remoteAddress, secure) {
	var self = this;
	self.session = session;
	self.global = global;
	self.remote = request.remote || false;
	self.xdomain = socket.handshake.xdomain;
	self.remoteAddress = remoteAddress;
	self.secure = secure;
	self.request = request;
	self.socket = socket;
	self.open = true;
	
	self._emitReturn = function(data) {
		if(self.open) {
			self.socket.emit('return', data);
		} else {
			throw "Exception: The current ServerRequest has already been closed";
		}
		if(data.close) {
			self.open = false;
		}
	}
	
	self.send = function(data) {
		self._emitReturn({cid: self.request.cid, value: data});
	}
	
	self.end = function(data) {
		self._emitReturn({cid: self.request.cid, value: data, close: 1});
	}
	
	self.error = function(data) {
		self._emitReturn({cid: self.request.cid, error: data});
	}
	
	self.collapse = function(data) {
		self._emitReturn({cid: self.request.cid, error: data, close: 1});
	}
	
	self.close = function() {
		self._emitReturn({cid: self.request.cid, close: 1, noValue: 1});
	}
}

var nCombo = new (function() {
	var self = this;
	
	// low level middleware
	self.MIDDLEWARE_HTTP = 'http';
	self.MIDDLEWARE_SOCKET_IO = 'socketIO';
	self.MIDDLEWARE_SOCKET_IO_AUTH = 'socketIOAuth';
	
	// core middleware
	self.MIDDLEWARE_ROUTER = 'router';
	self.MIDDLEWARE_LOCAL_CALL = 'localCall';
	self.MIDDLEWARE_REMOTE_CALL = 'remoteCall';
	self.MIDDLEWARE_LOCAL_EVENT = 'localEvent';
	self.MIDDLEWARE_REMOTE_EVENT = 'remoteEvent';
	
	self._cacheVersion = 0;
	
	self._options = {
		port: 8000,
		release: false,
		title: 'nCombo App',
		protocol: 'http',
		protocolOptions: {},
		logLevel: 1,
		workers: numCPUs,
		timeout: 10000,
		cacheLife: 2592000000,
		cacheType: 'private',
		cacheVersion: null,
		origins: '*:*',
		autoMinify: true,
		matchOriginProtocol: true,
		maxConnectionsPerAddress: 0
	}
	
	self._connectedAddresses = {};
	
	self._frameworkURL = '/framework/';
	self._appURL = '/app/';
	
	self._retryTimeout = 10000;
	
	self._dataServer = null;
	self._global = null;
	
	self._rootDirPath = path.resolve(__dirname + '/../../');
	self._ncomboModulesURL = '/node_modules/ncombo/';
	
	self._config = conf.parseConfig(__dirname + '/config.node.json');
	
	self._prerouter = require(__dirname + '/router/prerouter.node.js');
	self._cacheResponder = require(__dirname + '/router/cacheresponder.node.js');
	self._router = require(__dirname + '/router/router.node.js');
	self._preprocessor = require(__dirname + '/router/preprocessor.node.js');
	self._compressor = require(__dirname + '/router/compressor.node.js');
	self._responder = require(__dirname + '/router/responder.node.js');
	
	self._fileUploader = require('ncombo/fileuploader');
	
	self._rootTemplateURL = self._config.rootTemplateURL;
	self._rootTemplateBody = fs.readFileSync(self._rootDirPath + self._rootTemplateURL, 'utf8');
	self._rootTemplate = handlebars.compile(self._rootTemplateBody);
	
	self._clientScriptMap = {};
	self._clientScripts = [];
	self._clientStyles = [];
	self._wsEndpoint = null;
	self._extRegex = /[.][^\/\\]*$/;
	
	self._wsEndpoint = self._config.webServiceEndpoint;
	
	self._defaultScriptType = 'text/javascript';
	self._defaultStyleType = 'text/css';
	self._defaultStyleRel = 'stylesheet';
	
	self._server = null;
	self._io = null;
	self._prepareCallbacks = [];
	
	self._failedWorkerCleanups = {};
	
	self._spinJSURL = self._frameworkURL + 'libs/spin.js';
	
	self._faviconHandler = function(req, res, next) {
		var iconPath = self._urlToPath(self._appURL + 'assets/favicon.gif');
		
		if(req.url == '/favicon.ico') {
			fs.readFile(iconPath, function(err, data) {
				if(err) {
					if(err.code == 'ENOENT') {
						iconPath = self._urlToPath(self._frameworkURL + 'assets/favicon.gif');
						fs.readFile(iconPath, function(err, data) {
							if(err) {
								if(err.code == 'ENOENT') {
									res.writeHead(404);
									res.end();
								} else {
									res.writeHead(500);
									res.end();
								}
							} else {
								self._setFileResponseHeaders(res, iconPath);
								res.writeHead(200);
								res.end(data);
							}
						});
					} else {
						res.writeHead(500);
						res.end();
					}
				} else {
					self._setFileResponseHeaders(res, iconPath);
					res.writeHead(200);
					res.end(data);
				}
			});
		} else {
			next(req, res);
		}
	}
	
	self._getParamsHandler = function(req, res, next) {
		var urlParts = url.parse(req.url);
		var query = urlParts.query;
		req.url = urlParts.pathname;
		req.params = querystring.parse(query);
		next(req, res);
	}
	
	self._parseSID = function(cookieString) {
		if(cookieString) {
			var result = cookieString.match(/(ncsid=)([^;]*)/);
			if(result) {
				return result[2]
			}
		}
		return null;
	}
	
	self._redirect = function(req, res, url) {
		res.writeHead(301, {'Location': self._options.protocol + '://' + req.headers.host + url});
		res.end();
	}
	
	self._getAppDef = function() {
		var appDef = {};
		appDef.frameworkURL = self._frameworkURL;
		appDef.appURL = self._appURL;
		appDef.jsLibsURL = self._frameworkURL + 'libs/';
		appDef.pluginsURL = self._frameworkURL + 'plugins/';
		appDef.frameworkScriptsURL = self._frameworkURL + 'scripts/';
		appDef.frameworkStylesURL = self._frameworkURL + 'styles/';
		appDef.appScriptsURL = self._appURL + 'scripts/';
		appDef.appStylesURL = self._appURL + 'styles/';
		appDef.appTemplatesURL = self._appURL + 'templates/';
		appDef.appAssetsURL = self._appURL + 'assets/';
		appDef.appFilesURL = self._appURL + 'files/';
		appDef.wsEndpoint = self._wsEndpoint;
		appDef.releaseMode = self._options.release;
		appDef.timeout = self._options.timeout;
		
		return appDef;
	}
	
	self._getLoaderCode = function() {
		var appDef = self._getAppDef();
		var routToScriptURL = self._appURL + 'scripts/index.js';
		var loadScriptURL = self._frameworkURL + 'scripts/load.js';
			
		var resources = [];
		
		var len = self._clientStyles.length;
		var i, j, resURL, cur, count;
		for(i=0; i<len; i++) {
			cur = self._clientStyles[i];
			resURL = cur.path;
			resources.push(resURL);
		}
		
		var len = self._clientScripts.length;
		for(i=0; i<len; i++) {
			cur = self._clientScripts[i];
			resURL = cur.path;
			resources.push(resURL);
		}
		
		var resString = JSON.stringify(resources);
		var appString = JSON.stringify(appDef);
		var loaderCode = '$loader.init("' + self._frameworkURL + '","' + routToScriptURL + '","' +
				loadScriptURL + '",' + resString + ',' + appString + ',' + (self._options.release ? 'false' : 'true') + ');';
		
		return loaderCode;
	}
	
	self._fullAuthResources = {};
	
	self.allowFullAuthResource = function(url) {
		self._fullAuthResources[url] = true;
	}
	
	self.denyFullAuthResource = function(url) {
		if(self._fullAuthResources.hasOwnProperty(url)) {
			delete self._fullAuthResources[url];
		}
	}
	
	self.isFullAuthResource = function(url) {
		return self._fullAuthResources.hasOwnProperty(url);
	}
	
	self._writeSessionStartScreen = function(req, res) {
		var filePath = '/~sessionstart';
		var encoding = self._getReqEncoding(req);
		var cacheKey = encoding + ':' + req.url;
		
		res.setHeader('Access-Control-Allow-Methods', 'OPTIONS, HEAD, GET, POST');
		res.setHeader('Access-Control-Allow-Origin', '*');
		
		self._setFileResponseHeaders(res, filePath, 'text/html');
		
		if(self._options.release && cache.has(cacheKey)) {
			self._respond(req, res, cache.get(cacheKey), 'text/html');
		} else {
			var includeString = self._getScriptTag(self._ncomboModulesURL + 'smartcachemanager.js', 'text/javascript') + "\n";
			includeString += self._getScriptTag('/~timecache', 'text/javascript') + "\n";
			includeString += self._getScriptTag(self._spinJSURL, 'text/javascript') + "\n";
			includeString += self._getScriptTag('/node_modules/socket.io-client/dist/socket.io.min.js', 'text/javascript') + "\n";
			includeString += self._getScriptTag(self._ncomboModulesURL + 'session.js', 'text/javascript');
			
			var html = self._rootTemplate({title: self._options.title, includes: new handlebars.SafeString(includeString)});
			self._respond(req, res, html, 'text/html');
		}
	}
	
	self._getReqEncoding = function(req) {
		var acceptEncoding = req.headers['accept-encoding'] || '';
		
		var encoding;
		if(acceptEncoding.match(/\bgzip\b/)) {
			encoding = 'gzip';
		} else if (acceptEncoding.match(/\bdeflate\b/)) {
			encoding = 'deflate';
		} else {
			encoding = '';
		}
		return encoding;
	}
	
	self._sessionHandler = function(req, res, next) {
		req.global = self._global;
		
		if(req.url == '/~startscript') {
			var encoding = self._getReqEncoding(req);
			var cacheKey = encoding + ':' + req.url;
			
			if(self._options.release && cache.has(cacheKey)) {
				self._respond(req, res, cache.get(cacheKey), 'text/javascript');
			} else {
				var loaderCode = self._getLoaderCode();
				self._respond(req, res, loaderCode, 'text/javascript');
			}
		} else if(req.url == '/~timecache') {
			var now = (new Date()).getTime();
			var expiry = new Date(now + self._options.cacheLife);
			res.setHeader('Content-Type', 'text/javascript');
			res.setHeader('Set-Cookie', 'nccached=0;');
			res.setHeader('Cache-Control', 'private');
			res.setHeader('Pragma', 'private');
			res.setHeader('Expires', expiry.toUTCString());
			res.writeHead(200);
			var script = '/* Check if cached */';
			res.end(script);
		} else {
			var sid = self._parseSID(req.headers.cookie);
			var url;
			
			if(req.url == '/') {
				url = self._rootTemplateURL;
			} else {
				url = req.url;
			}
			
			var filePath = self._urlToPath(url);
			
			if(url == self._rootTemplateURL) {
				self._writeSessionStartScreen(req, res);
			} else {
				var encoding = self._getReqEncoding(req);
				var cacheKey = encoding + ':' + url;
				
				var skipCache = (url == self._ncomboModulesURL + 'smartcachemanager.js');
				
				if(skipCache || url == '/node_modules/socket.io-client/dist/socket.io.min.js' || url == self._ncomboModulesURL + 'session.js'
						|| self.isFullAuthResource(url)) {
					
					if(self._options.release && cache.has(cacheKey)) {
						self._setFileResponseHeaders(res, filePath, null, skipCache);
						self._respond(req, res, cache.get(cacheKey));
					} else {
						fs.readFile(filePath, function(err, data) {
							if(err) {
								res.writeHead(500);
								res.end('Failed to start session');
							} else {						
								self._setFileResponseHeaders(res, filePath, null, skipCache);
								
								if(url == self._ncomboModulesURL + 'smartcachemanager.js') {
									var template = handlebars.compile(data.toString());
									data = template({cacheVersion: '*/ = ' + self._cacheVersion + ' /*'});
								} else if(url == self._ncomboModulesURL + 'session.js') {
									var template = handlebars.compile(data.toString());
									data = template({endpoint: self._wsEndpoint, port: self._options.port,
											ncomboModulesURL: self._ncomboModulesURL, frameworkURL: self._frameworkURL});
								}
								self._respond(req, res, data);
							}
						});
					}
				} else {
					if(sid) {
						var socket = self._wsSocks.socket(sid);
						var keyPath = '__opensockets.' + sid;
						
						self._dataClient.get(keyPath, function(err, data) {
							if(err) {
								console.log('   nCombo Error - Failed to get open socket list');
							} else {
								if(data) {
									req.session = new Session(sid, socket, self._dataClient);
									next(req, res);
								} else {
									res.writeHead(500);
									res.end('Failed to open session socket');
								}
							}
						});
					} else {
						res.writeHead(500);
						res.end('File cannot be accessed outside of a session');
					}
				}
			}
		}
	}
	
	self._prepareHTTPHandler = function(req, res, next) {
		res.connection.setNoDelay(true);
		next(req, res);
	}
	
	self._middleware = {};
	
	self._middleware[self.MIDDLEWARE_HTTP] = stepper.create();
	self._middleware[self.MIDDLEWARE_HTTP].addFunction(self._prepareHTTPHandler);
	
	self._middleware[self.MIDDLEWARE_SOCKET_IO] = stepper.create();
	self._middleware[self.MIDDLEWARE_SOCKET_IO_AUTH] = stepper.create();
	
	self._responseNotSentValidator = function(req, res) {
		return req && res && !res.finished;
	}
	
	self._backRoutStepper = stepper.create();
	self._backRoutStepper.addFunction(self._fileUploader.upload);
	self._backRoutStepper.addFunction(self._prerouter.run);
	self._backRoutStepper.addFunction(self._cacheResponder.run);
	self._backRoutStepper.addFunction(self._router.run);
	self._backRoutStepper.addFunction(self._preprocessor.run);
	self._backRoutStepper.addFunction(self._compressor.run);
	self._backRoutStepper.setTail(self._responder.run);
	
	self._respond = function(req, res, data, mimeType) {
		req.rout = {};
		
		if(typeof data == 'string') {
			req.rout.buffer = new Buffer(data);
		} else {
			req.rout.buffer = data;
		}
		
		if(mimeType) {
			req.rout.mimeType = mimeType;
		}
		
		self._backRoutStepper.run(req, res);
	}
	
	self._backRoutStepper.setValidator(self._responseNotSentValidator);
	
	self._middleware[self.MIDDLEWARE_ROUTER] = stepper.create();
	self._middleware[self.MIDDLEWARE_ROUTER].setTail(self._backRoutStepper);
	self._middleware[self.MIDDLEWARE_ROUTER].setValidator(self._responseNotSentValidator);
	
	self._routStepper = stepper.create();
	self._routStepper.addFunction(self._faviconHandler);
	self._routStepper.addFunction(self._getParamsHandler); 
	self._routStepper.addFunction(self._sessionHandler);
	self._routStepper.setTail(self._middleware[self.MIDDLEWARE_ROUTER]);
	
	self._middleware[self.MIDDLEWARE_HTTP].setTail(self._routStepper);
	
	self._middleware[self.MIDDLEWARE_LOCAL_CALL] = stepper.create();
	self._middleware[self.MIDDLEWARE_LOCAL_CALL].setTail(gateway.exec);
	
	self._middleware[self.MIDDLEWARE_LOCAL_EVENT] = stepper.create();
	self._middleware[self.MIDDLEWARE_LOCAL_EVENT].setTail(gateway.watch);
	
	self._middleware[self.MIDDLEWARE_REMOTE_CALL] = stepper.create();
	self._middleware[self.MIDDLEWARE_REMOTE_CALL].setTail(ws.exec);
	
	self._middleware[self.MIDDLEWARE_REMOTE_EVENT] = stepper.create();
	self._middleware[self.MIDDLEWARE_REMOTE_EVENT].setTail(ws.watch);
	
	self._clientIncludes = self._config.clientIncludes;
	
	mime.define({
		'text/css': ['less'],
		'text/html': ['handlebars']
	});
	
	if(self._config.privateExtensionRegex) {
		self._privateExtensionRegex = new RegExp(self._config.privateExtensionRegex);
	} else {
		self._privateExtensionRegex = /$a/;
	}
	self._wsSocks = null;
		
	self._normalizeURL = function(url) {
		url = path.normalize(url);
		return url.replace(/\\/g, '/');
	}
	
	self.useScript = function(pathFromRoot, type) {
		var normalPath = self._normalizeURL(pathFromRoot);
		var obj = {};
		if(!self._clientScriptMap[normalPath]) {
			if(self._extRegex.test(pathFromRoot)) {
				obj['path'] = normalPath;
			} else {
				obj['path'] = pathFromRoot + '.js';
			}
			if(type) {
				obj['type'] = type;
			}
			self._clientScripts.push(obj);
			self._clientScriptMap[normalPath] = true;
		}
	}
	
	self.useStyle = function(pathFromRoot, type, rel) {
		var normalPath = self._normalizeURL(pathFromRoot);
		var obj = {};
		if(self._extRegex.test(normalPath)) {
			obj['path'] = normalPath;
		} else {
			obj['path'] = normalPath + '.css';
		}
		
		if(type) {
			obj['type'] = type;
		}
		if(rel) {
			obj['rel'] = rel;
		}
		self._clientStyles.push(obj);
	}
	
	self.useScript(self._frameworkURL + 'libs/jquery.js');
	self.useScript(self._frameworkURL + 'libs/handlebars.js');
	self.useScript(self._frameworkURL + 'libs/json2.js');
	
	self.useScript(self._ncomboModulesURL + 'ncombo-client.js');
	self.useScript(self._ncomboModulesURL + 'init.js');
	
	var i, nurl;
	for(i in self._clientIncludes) {
		nurl = path.normalize(self._frameworkURL + self._clientIncludes[i]);
		self.useScript(nurl);
	}
	
	self._setFileResponseHeaders = function(res, filePath, mimeType, forceRefresh) {	
		if(!mimeType) {
			mimeType = mime.lookup(filePath);
		}
		
		if(self._options.release && !forceRefresh) {
			var now = new Date();
			var expiry = new Date(now.getTime() + self._options.cacheLife);
			
			res.setHeader('Cache-Control', self._options.cacheType);
			res.setHeader('Pragma', self._options.cacheType);
			res.setHeader('Expires', expiry.toUTCString());
		} else {
			res.setHeader('Cache-Control', 'no-cache');
			res.setHeader('Pragma', 'no-cache');
		}
		
		res.setHeader('Content-Type', mimeType);
	}
	
	self._urlToPath = function(url) {
		return self._rootDirPath + url;
	}
	
	self._getScriptCodeTag = function(code, type) {
		if(!type) {
			type = self._defaultScriptType;
		}
		return '<script type="' + type + '">' + code + '</script>';
	}
	
	self._getScriptTag = function(url, type) {
		url = self._normalizeURL(url);
		return '<script type="' + type + '" src="' + url + '"></script>';
	}
	
	self._getStyleTag = function(url, type) {
		url = self._normalizeURL(url);
		var rel = scriptDefObject.rel;
		if(!rel) {
			rel = self._defaultStyleRel;
		}
		return '<link rel="' + rel + '" type="' + type + '" href="' + url + '" />';
	}
	
	self._cleanupWorker = function(pid) {
		var getWorkerSessionCallback = function(err, sessionIDs) {
			if(err) {
				setTimeout(getWorkerSession, self._retryTimeout);
			} else {
				var i;
				for(i in sessionIDs) {
					(function(sockID) {
						var removeOpenSocketCallback = function(err) {
							if(err) {
								setTimeout(removeOpenSocket, self._retryTimeout);
							}
						}
						var removeOpenSocket = function() {
							self._dataClient.remove('__opensockets.' + sockID, removeOpenSocketCallback);
						}
						
						removeOpenSocket();
					})(i);
				}
				
				var removeWorkerSessionCallback = function(err) {
					if(err) {
						console.log('   nCombo Error - Failed to cleanup worker sessions');
						setTimeout(removeWorkerSession, self._retryTimeout);
					}
				}
				var removeWorkerSession = function() {
					self._dataClient.remove('__workersessions.' + pid, removeWorkerSessionCallback);
				}
				
				removeWorkerSession();
			}
		}
		var getWorkerSession = function() {
			self._dataClient.get('__workersessions.' + pid, getWorkerSessionCallback);
		}
		
		getWorkerSession();
	}
	
	self._validateOptions = function(options, validationMap) {
		var i, err;
		for(i in options) {
			if(validationMap.hasOwnProperty(i) && options.hasOwnProperty(i)) {
				err = validationMap[i](options[i]);
				if(err) {
					throw new Error("The specified '" + i + "' option value is invalid " + err);
				}
			}
		}
	}
	
	self.start = function(options) {
		var dataPort, dataKey;
		
		var release = false;
		
		var isInt = function(input) {
			return /^[0-9]+$/.test(input);
		}
		
		var optionValidationMap = {
			port: function() {
				return isInt(arguments[0]) ? null : 'expecting an integer';
			},
			title: function() {
				return (typeof arguments[0] == 'string') ? null : 'expecting a string';
			},
			protocol: function() {
				return (arguments[0] == 'http' || arguments[0] == 'https') ? null : "must be either 'http' or 'https'";
			},
			logLevel: function() {
				return isInt(arguments[0]) ? null : 'expecting an integer';
			},
			workers: function() {
				return isInt(arguments[0]) ? null : 'expecting an integer';
			},
			timeout: function() {
				return isInt(arguments[0]) ? null : 'expecting an integer';
			},
			cacheLife: function() {
				return isInt(arguments[0]) ? null : 'expecting an integer';
			},
			cacheType: function() {
				return (arguments[0] == 'private' || arguments[0] == 'public') ? null : "must be either 'private' or 'public'";
			},
			cacheVersion: function() {
				return (isInt(arguments[0]) || arguments[0] == null) ? null : 'expecting an integer';
			},
			origins: function() {
				return (typeof arguments[0] == 'string') ? null : 'expecting a string';
			},
			maxConnectionsPerAddress: function() {
				return (isInt(arguments[0]) || arguments[0] == null) ? null : 'expecting an integer';
			}
		}
		
		if(options) {
			var i;
			for(i in options) {
				self._options[i] = options[i];
			}
		}
		
		self._validateOptions(self._options, optionValidationMap);
		
		self._options.rootDirPath = self._rootDirPath;
		var appDef = self._getAppDef();
		self._options.minifyURLs = [appDef.appScriptsURL, appDef.frameworkURL + 'scripts/load.js', self._ncomboModulesURL + 'ncombo-client.js', 
				self._ncomboModulesURL + 'loader.js'];
		
		var secure = false;
		
		if(self._options.protocol == 'http') {
			self._server = http.createServer(self._middleware[self.MIDDLEWARE_HTTP].run);
		} else if(self._options.protocol == 'https') {
			secure = true;
			if(self._options.protocolOptions) {
				self._server = https.createServer(self._options.protocolOptions, self._middleware[self.MIDDLEWARE_HTTP].run);
			} else {
				throw "The protocolOptions option must be set when https is used";
			}
		} else {
			throw "The " + self._options.protocol + " protocol is not supported";
		}
		
		self.allowFullAuthResource(self._spinJSURL);
		self.allowFullAuthResource(self._frameworkURL + 'assets/logo.png');
		self.allowFullAuthResource(self._frameworkURL + 'scripts/connectionlimit.js');
		self.allowFullAuthResource(self._frameworkURL + 'styles/ncombo.css');
		self.allowFullAuthResource(self._ncomboModulesURL + 'loader.js');
		
		var begin = function() {
			self._options.cacheVersion = self._cacheVersion;
			self._prerouter.init(self._options);
			self._preprocessor.init(self._options);
			self._server.listen(self._options.port);
			
			self._io = io.listen(self._server);
			self._io.set('log level', self._options.logLevel);
			self._io.set('store', clusterHubStore);
			self._io.set('origins', self._options.origins);
			self._io.set('polling duration', self._options.timeout);
			self._io.set('close timeout', self._options.timeout);
			self._io.set('match origin protocol', self._options.matchOriginProtocol);
			
			var remoteAddr;
			
			if(self._options.maxConnectionsPerAddress > 0) {
				self._io.set('authorization', function(handshakeData, callback) {
					remoteAddr = handshakeData.address.address;
					
					if(!self._connectedAddresses.hasOwnProperty(remoteAddr) || self._connectedAddresses[remoteAddr] < self._options.maxConnectionsPerAddress) {
						self._middleware[self.MIDDLEWARE_SOCKET_IO_AUTH].setTail(function() {
							callback(null, true);
						});
						self._middleware[self.MIDDLEWARE_SOCKET_IO_AUTH].run(handshakeData);
					} else {
						callback("reached connection limit for the address '" + remoteAddr + "'", false);
					}
				});
			} else {
				self._io.set('authorization', function(handshakeData, callback) {
					self._middleware[self.MIDDLEWARE_SOCKET_IO_AUTH].setTail(function() {
						callback(null, true);
					});
					self._middleware[self.MIDDLEWARE_SOCKET_IO_AUTH].run(handshakeData);
				});
			}
			
			self._dataClient = ndata.createClient(dataPort, dataKey);
			
			self._global = new Global(self._dataClient);
		
			gateway.setReleaseMode(release);
			ws.setReleaseMode(release);
			ws.setTimeout(self._options.timeout);
		
			self._wsSocks = self._io.of(self._wsEndpoint);
			
			self._wsSocks.on('connection', function(socket) {
				var remoteAddress = socket.handshake.address;
				
				if(!self._connectedAddresses.hasOwnProperty(remoteAddress.address)) {
					self._connectedAddresses[remoteAddress.address] = 0;
				}
				
				self._connectedAddresses[remoteAddress.address]++;
				
				var failFlag = false;
				
				self._dataClient.set('__workersessions.' + cluster.worker.process.pid + '.' + socket.id, 1, function(err) {
					if(err && !failFlag) {
						failFlag = true;
						socket.disconnect();
						console.log('   nCombo Error - Failed to initiate socket');
					}
				});
				self._dataClient.set('__opensockets.' + socket.id, 1, function(err) {
					if(err) {
						if(!failFlag) {
							failFlag = true;
							socket.disconnect();
							console.log('   nCombo Error - Failed to initiate socket');
						}
					} else {
						socket.emit('ready');
					}
				});
				
				var session = new Session(socket.id, socket, self._dataClient);
				
				// handle local server interface call
				socket.on('localCall', function(request) {
					var siReq = new ServerRequest(socket, request, session, self._global, remoteAddress, secure);
					self._middleware[self.MIDDLEWARE_SOCKET_IO].setTail(self._middleware[self.MIDDLEWARE_LOCAL_CALL]);
					self._middleware[self.MIDDLEWARE_SOCKET_IO].run(siReq);
				});
				
				// handle remote interface call
				socket.on('remoteCall', function(request) {
					var siReq = new ServerRequest(socket, request, session, self._global, remoteAddress, request.secure);
					self._middleware[self.MIDDLEWARE_SOCKET_IO].setTail(self._middleware[self.MIDDLEWARE_REMOTE_CALL]);
					self._middleware[self.MIDDLEWARE_SOCKET_IO].run(siReq);
				});
				
				// watch local server events
				socket.on('watchLocal', function(request) {
					var siReq = new ServerRequest(socket, request, session, self._global, remoteAddress, secure);
					self._middleware[self.MIDDLEWARE_SOCKET_IO].setTail(self._middleware[self.MIDDLEWARE_LOCAL_EVENT]);
					self._middleware[self.MIDDLEWARE_SOCKET_IO].run(siReq);
				});
				
				// unwatch local server events
				socket.on('unwatchLocal', function(request) {
					var siReq = new ServerRequest(socket, request, session, self._global, remoteAddress, secure);
					gateway.unwatch(siReq);
				});
				
				// watch remote server events
				socket.on('watchRemote', function(request) {
					var siReq = new ServerRequest(socket, request, session, self._global, remoteAddress, request.secure);
					self._middleware[self.MIDDLEWARE_SOCKET_IO].setTail(self._middleware[self.MIDDLEWARE_REMOTE_EVENT]);
					self._middleware[self.MIDDLEWARE_SOCKET_IO].run(siReq);
				});
				
				// unwatch remote server events
				socket.on('unwatchRemote', function(request) {
					var siReq = new ServerRequest(socket, request, session, self._global, remoteAddress, secure);
					ws.unwatch(siReq);
				});
				
				var removeOpenSocketCallback = function(err) {
					if(err) {
						setTimeout(removeOpenSocket, self._retryTimeout);
					}
				}
				
				var removeOpenSocket = function() {
					self._dataClient.remove('__opensockets.' + socket.id, removeOpenSocketCallback);
				}
				
				var removeWorkerSessionCallback = function(err) {
					if(err) {
						setTimeout(removeWorkerSession, self._retryTimeout);
					}
				}
				
				var removeWorkerSession = function() {
					self._dataClient.remove('__workersessions.' + cluster.worker.process.pid + '.' + socket.id, removeWorkerSessionCallback);
				}
				
				var destroySessionCallback = function(err) {
					if(err) {
						setTimeout(destroySession, self._retryTimeout);
					}
				}
				
				var destroySession = function() {
					session._destroy(destroySessionCallback);
				}
				
				socket.on('disconnect', function() {
					gateway.unwatchAll(socket);
					ws.unwatchAll(socket);
					
					if(self._connectedAddresses.hasOwnProperty(remoteAddress.address)) {
						if(--self._connectedAddresses[remoteAddress.address] <= 0) {
							delete self._connectedAddresses[remoteAddress.address];
						}
					}
					
					destroySession();
					removeOpenSocket();
					removeWorkerSession();
				});
			});
			
			self._server.on('listening', function() {
				gateway.init(__dirname + '/../..' + self._appURL + 'serverinterfaces/', self._dataClient, self._privateExtensionRegex);
				process.send({action: 'init'});
			});
		}
		
		if(cluster.isMaster) {
			if(self._options.cacheVersion == null) {
				self._cacheVersion = (new Date()).getTime();
			} else {
				self._cacheVersion = self._options.cacheVersion;
			}
			
			portScanner.findAPortNotInUse(self._options.port + 1, self._options.port + 1000, 'localhost', function(error, datPort) {
				dataPort = datPort;
				var pass = crypto.randomBytes(32).toString('hex');
				
				self._dataServer = ndata.createServer(dataPort, pass);
				self._dataServer.on('ready', function() {
					var i;
					var worker = null;
					var activeProcesses = 0;
					
					self._dataClient = ndata.createClient(dataPort, pass);
					
					var handler = function(data) {
						if(data.action == 'init') {
							if(worker) {
								worker.removeListener('message', handler);
							}
							
							if(activeProcesses >= self._options.workers) {
								console.log('   nCombo server started on port ' + self._options.port + ' - Number of workers: ' + activeProcesses);
							} else {
								activeProcesses++;
								worker = cluster.fork();
								worker.send({action: 'init', dataPort: dataPort, dataKey: pass, cacheVersion: self._cacheVersion});
								worker.on('message', handler);
							}
						}
					}
					
					cluster.on('exit', function(worker, code, signal) {
						console.log('   Worker ' + worker.process.pid + ' died');
						self._cleanupWorker(worker.process.pid);
						
						activeProcesses--;
						if(self._options.release) {
							console.log('   Respawning worker');
							handler({action: 'init'});
						} else {
							if(activeProcesses <= 0) {
								console.log('   All workers are dead - nCombo is shutting down');
								process.exit();
							}
						}
					});
					
					handler({action: 'init'});
				});
			});
		} else {
			var handler = function(data) {
				if(data.action == 'init') {
					process.removeListener('message', handler);
					dataPort = data.dataPort;
					dataKey = data.dataKey;
					self._cacheVersion = data.cacheVersion;
					begin();
				}
			}
			
			process.on('message', handler);
		}
	}
	
	self.addMiddleware = function(type, callback) {
		if(!self._middleware.hasOwnProperty(type)) {
			console.log("   Middleware type '" + type + "' is invalid");
		}
		
		self._middleware[type].addFunction(callback);
	}
	
	self.removeMiddleware = function(type, callback) {
		if(self._middleware[type].getLength() > 0) {
			self._middleware[type].remove(callback);
		}
	}
})();

module.exports = nCombo;
