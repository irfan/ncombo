var http = require('http'),
	https = require('https'),
	path = require('path'),
	mime = require('mime'),
	fs = require('fs'),
	ndata = require('ndata'),
	io = require('socket.io'),
	store = new (require('socket.io-clusterhub')),
	conf = require('ncombo/core/configmanager'),
	gateway = require('ncombo/core/gateway'),
	handlebars = require('./libs/handlebars'),
	cache = require('ncombo/core/cache'),
	ws = require('ncombo/core/webservice'),
	portScanner = require('portscanner'),
	json = require('json'),
	crypto = require('crypto'),
	stepper = require('stepper');

var cluster = require('cluster');
var numCPUs = require('os').cpus().length;

var SessionEmitter = function(namespace, socket) {
	var self = this;
	self._namespace = namespace;
	self._socket = socket;
	
	self.emit = function(event, data) {
		var eventObject = {
			ns: self._namespace,
			event: event,
			data: data
		}
		
		self._socket.emit('event', eventObject);
	}
	
	self.emitRaw = function(eventData) {
		self._socket.emit('event', eventData);
	}
}

var Session = function(sessionID, socket, dataClient) {
	var self = this;
	self.id = sessionID;
	self._socket = socket;
	self._emitterNamespace = new SessionEmitter('__main', self._socket);
	self._namespaces = {'__main': self._emitterNamespace};
	
	self.emit = function(event, data) {
		self._emitterNamespace.emit(event, data);
	}
	
	self.ns = function(namespace) {
		if(!self._namespaces[namespace]) {
			self._namespaces[namespace] = new SessionEmitter(namespace, self._socket);
		}
		return self._namespaces[namespace];
	}
	
	self.get = function(key, callback) {
		dataClient.get('session ' + self.id + ' ' + key, callback);
	}
	
	self.set = function(key, value, callback) {
		dataClient.set('session ' + self.id + ' ' + key, value, callback);
	}
}

var GlobalEmitter = function(namespace, sessionMap, dataClient) {
	var self = this;
	self._namespace = namespace;
	self._sessionMap = sessionMap;
	
	self.broadcast = function(event, data) {
		if(!self._namespace || !event) {
			throw "Exception: One or more required parameters were undefined";
		}
		
		var eventObject = {
			ns: self._namespace,
			event: event,
			data: data
		};
		
		dataClient.get('__opensockets', function(sockets) {
			var i;
			for(i in sockets) {
				dataClient.broadcast('session ' + i + ' ' + self._namespace + '.' + event, data);
			}
		});
	}
	
	self.emit = function(sessionID, event, data) {
		dataClient.broadcast('session ' + sessionID + ' ' + self._namespace + '.' + event, data);
	}
}

var Global = function(sessionMap, dataClient) {
	var self = this;
	self._sessionMap = sessionMap;
	self._emitterNamespace = new GlobalEmitter('__main', self._sessionMap, dataClient);
	self._namespaces = {'__main': self._emitterNamespace};
	
	self._data = {};
	
	self.emit = function(sessionID, event, data) {
		self._emitterNamespace.emit(sessionID, event, data);
	}
	
	self.broadcast = function(event, data) {
		self._emitterNamespace.broadcast(event, data);
	}
	
	self.ns = function(namespace) {
		if(!self._namespaces[namespace]) {
			self._namespaces[namespace] = new GlobalEmitter(namespace, self._sessionMap, dataClient);
		}
		return self._namespaces[namespace];
	}
	
	self.get = function(key, callback) {
		dataClient.get('global ' + key, callback);
	}
	
	self.set = function(key, value, callback) {
		dataClient.set('global ' + key, value, callback);
	}
}

var ServerRequest = function(socket, request, session, global, origin, secure) {
	var self = this;
	self.session = session;
	self.global = global;
	self.remote = request.remote || false;
	self.origin = origin;
	self.secure = secure;
	self.request = request;
	self.socket = socket;
	self.open = true;
	
	self._emitReturn = function(data) {
		if(self.open) {
			self.socket.emit('return', data);
		} else {
			throw "Exception: The current ServerRequest has already been closed";
		}
		if(data.close) {
			self.open = false;
		}
	}
	
	self.send = function(data) {
		self._emitReturn({cid: self.request.cid, value: data});
	}
	
	self.end = function(data) {
		self._emitReturn({cid: self.request.cid, value: data, close: 1});
	}
	
	self.error = function(data) {
		self._emitReturn({cid: self.request.cid, value: data, error: 1});
	}
	
	self.collapse = function(data) {
		self._emitReturn({cid: self.request.cid, value: data, error: 1, close: 1});
	}
	
	self.close = function() {
		self._emitReturn({cid: self.request.cid, close: 1, noValue: 1});
	}
}

var nCombo = new (function() {
	var self = this;
	
	self._launchTime = (new Date()).getTime();
	self._dataServer = null;
	self._sessionMap = {};
	self._global = null;
	
	self._rootDirPath = path.resolve(__dirname + '/../../');
	self._refDir = '/node_modules/ncombo/';
	
	self._config = conf.parseConfig(__dirname + '/config.node.json');
	self._router = require(__dirname + '/' + self._config.router);
	self._fileUploader = require('ncombo/core/fileuploader');
	
	self._rootTemplateURL = self._config.rootTemplateURL;
	self._rootTemplateBody = fs.readFileSync(self._rootDirPath + self._rootTemplateURL, 'utf8');
	self._rootTemplate = handlebars.compile(self._rootTemplateBody);
	
	self._clientScriptMap = {};
	self._clientScripts = [];
	self._clientStyles = [];
	self._wsEndpoint = null;
	self._extRegex = /[.][^\/\\]*$/;
	
	self._wsEndpoint = self._config.webServiceEndpoint;
	
	self._protocol = 'http';
	self._protocolOptions = {};
	
	self._cacheMode = false;
	self._cacheLife = 2592000000;
	
	self._defaultScriptType = 'text/javascript';
	self._defaultStyleType = 'text/css';
	self._defaultStyleRel = 'stylesheet';
	
	self._server = null;
	self._io = null;
	self._prepareCallbacks = [];
	
	self._faviconHandler = function(req, res, next) {
		var iconPath = self._urlToPath('/app/assets/favicon.gif');
		
		if(req.url == '/favicon.ico') {
			fs.readFile(iconPath, function(err, data) {
				if(err) {
					if(err.code == 'ENOENT') {
						iconPath = self._urlToPath('/node_modules/ncombo/assets/favicon.gif');
						fs.readFile(iconPath, function(err, data) {
							if(err) {
								if(err.code == 'ENOENT') {
									res.writeHead(404);
									res.end();
								} else {
									res.writeHead(500);
									res.end();
								}
							} else {
								self._setFileResponseHeaders(res, iconPath);
								res.end(data);
							}
						});
					} else {
						res.writeHead(500);
						res.end();
					}
				} else {
					self._setFileResponseHeaders(res, iconPath);
					res.end(data);
				}
			});
		} else {
			next(req, res);
		}
	}
	
	self._getParamsHandler = function(req, res, next) {
		var paramString = req.url.match(/\?(.*)/);
		if(paramString) {
			var fieldsMap = {};
			var fields = paramString[1].split('&');
			var i, keyVal;
			for(i in fields) {
				keyVal = fields[i].split('=');
				fieldsMap[keyVal[0]] = keyVal[1];
			}
			
			req.url = req.url.replace(paramString[0], '');
			req.inputFields = fieldsMap;
		}
		
		next(req, res);
	}
	
	self._parseSID = function(cookieString) {
		if(cookieString) {
			var result = cookieString.match(/(sid=)([0-9]*)/);
			if(result) {
				return result[2]
			}
		}
		return null;
	}
	
	self._redirect = function(req, res, url) {
		res.writeHead(301, {'Location': self._protocol + '://' + req.headers.host + url});
		res.end();
	}
	
	self._getAppDef = function(frameworkURL, req) {
		var appDef = {};
		appDef.frameworkURL = frameworkURL;
		appDef.appURL = '/app/';
		appDef.jsLibsURL = '/node_modules/ncombo/libs/';
		appDef.frameworkStylesURL = '/node_modules/ncombo/styles/';
		appDef.appScriptsURL = '/app/scripts/';
		appDef.appStylesURL = '/app/styles/';
		appDef.appTemplatesURL = '/app/templates/';
		appDef.appAssetsURL = '/app/assets/';
		appDef.appFilesURL = '/app/files/';
		appDef.wsEndpoint = self._wsEndpoint;
		appDef.releaseMode = self._cacheMode;
		
		return appDef;
	}
	
	self._getLoaderCode = function(req) {
		var frameworkURL = '/node_modules/ncombo/';
		var appDef = self._getAppDef(frameworkURL, req);
		var routToScriptURL = '/app/scripts/index.js';
		var loadScriptURL = '/node_modules/ncombo/scripts/load.js';
			
		var resources = [];
		var resourceProps = {};
		
		var len = self._clientStyles.length;
		var i, j, resURL, cur, count;
		for(i=0; i<len; i++) {
			cur = self._clientStyles[i];
			resURL = cur.path;
			resources.push(resURL);
			resourceProps[resURL] = {};
			count = 0;
			for(j in cur) {
				if(j != 'path') {
					resourceProps[resURL][j] = cur[j];
					count++;
				}
			}
			if(count == 0) {
				delete resourceProps[resURL];
			}
		}
		
		var len = self._clientScripts.length;
		for(i=0; i<len; i++) {
			cur = self._clientScripts[i];
			resURL = cur.path;
			resources.push(resURL);
			resourceProps[resURL] = {};
			count = 0;
			for(j in cur) {
				if(j != 'path') {
					resourceProps[resURL][j] = cur[j];
					count++;
				}
			}
			if(count == 0) {
				delete resourceProps[resURL];
			}
		}
		
		var resString = JSON.stringify(resources);
		var resPropString = JSON.stringify(resourceProps);
		
		var appString = JSON.stringify(appDef);
		
		var loaderCode = '$loader.init("' + frameworkURL + '","' + routToScriptURL + '","' +
				loadScriptURL + '",' + resString + ',' + resPropString + ',' + appString + ',' + (self._cacheMode ? 'false' : 'true') + ');';
		
		return loaderCode;
	}
	
	self._writeSessionStartScreen = function(req, res) {
		res.setHeader('Access-Control-Allow-Methods', 'OPTIONS, HEAD, GET, POST');
		res.setHeader('Access-Control-Allow-Origin', '*');
		
		var filePath = '/~sessionstart';
		
		self._setFileResponseHeaders(res, filePath, 'text/html', true);
		if(self._cacheMode && cache.hasFile(filePath)) {
			res.end(cache.getFile(filePath));
		} else {
			var includeString = self._getScriptTag('/node_modules/socket.io-client/dist/socket.io.min.js', 'text/javascript') + "\n";
			includeString += self._getScriptTag('/node_modules/ncombo/core/session.js', 'text/javascript');
			
			var html = self._rootTemplate({includes: new handlebars.SafeString(includeString)});
			
			if(self._cacheMode) {
				cache.setFile(filePath, html);
			}
			res.end(html);
		}
	}
	
	self._sessionHandler = function(req, res, next) {
		req.global = self._global;
		if(req.url == '/~startscript') {			
			var loaderCode = self._getLoaderCode(req);
			res.end(loaderCode);
		} else {
			var sid = self._parseSID(req.headers.cookie);
			
			var url;
			
			if(req.url == '/') {
				url = self._rootTemplateURL;
			} else {
				url = req.url;
			}
			
			var filePath = self._urlToPath(url);
			
			if(url == self._rootTemplateURL) {
				self._writeSessionStartScreen(req, res);
			} else {
				var skipCache = (url == '/node_modules/ncombo/core/session.js');
				
				if(url == '/node_modules/ncombo/core/session.js' || url == '/node_modules/socket.io-client/dist/socket.io.min.js' || 
						url == '/node_modules/ncombo/loader.js' || url == '/node_modules/ncombo/styles/ncombo.css') {
					
					// never cache session.js
					if(!skipCache && self._cacheMode && cache.hasFile(filePath)) {
						self._setFileResponseHeaders(res, filePath);
						if(!res.finished) {
							res.end(cache.getFile(filePath));
						}
					} else {
						fs.readFile(filePath, function(err, data) {
							if(err) {
								res.writeHead(500);
								res.end('Failed to start session');
							} else {
								self._setFileResponseHeaders(res, filePath, null, skipCache);
								
								var template = handlebars.compile(data.toString());
								var js = template({endpoint: self._wsEndpoint, cacheVersion: self._launchTime});
								
								if(!skipCache && self._cacheMode) {
									cache.setFile(filePath, js);
								}
								
								res.end(js);
							}
						});
					}
				} else if(sid && self._sessionMap.hasOwnProperty(sid)) {
					req.session = self._sessionMap[sid];
					next(req, res);
				} else {
					self._redirect(req, res, '/');
				}
			}
		}
	}
	
	self._responseNotSentValidator = function(req, res) {
		return req && res && !res.finished;
	}
	
	self._middleware = {};
	
	self._backRoutStepper = stepper.create();
	self._backRoutStepper.addFunction(self._fileUploader.upload);
	self._backRoutStepper.setTail(self._router.rout);
	self._backRoutStepper.setValidator(self._responseNotSentValidator);
	
	self._middleware['router'] = stepper.create();
	self._middleware['router'].setTail(self._backRoutStepper);
	self._middleware['router'].setValidator(self._responseNotSentValidator);
	
	self._routStepper = stepper.create();
	self._routStepper.addFunction(self._faviconHandler);
	self._routStepper.addFunction(self._getParamsHandler); 
	self._routStepper.addFunction(self._sessionHandler);
	self._routStepper.setTail(self._middleware['router']);
	
	self._middleware['localCall'] = stepper.create();
	self._middleware['localCall'].setTail(gateway.exec);
	
	self._middleware['localEvent'] = stepper.create();
	self._middleware['localEvent'].setTail(gateway.watch);
	
	self._middleware['remoteCall'] = stepper.create();
	self._middleware['remoteCall'].setTail(ws.exec);
	
	self._middleware['remoteEvent'] = stepper.create();
	self._middleware['remoteEvent'].setTail(ws.watch);
	
	self._clientIncludes = self._config.clientIncludes;
	
	mime.define({
		'text/css': ['less'],
		'text/html': ['handlebars']
	});
	
	if(self._config.privateExtensionRegex) {
		self._privateExtensionRegex = new RegExp(self._config.privateExtensionRegex);
	} else {
		self._privateExtensionRegex = /$a/;
	}
	self._wsSocks = null;
		
	self._normalizeURL = function(url) {
		url = path.normalize(url);
		return url.replace(/\\/g, '/');
	}
	
	self.useScript = function(pathFromRoot, type) {
		var normalPath = self._normalizeURL(pathFromRoot);
		var obj = {};
		if(!self._clientScriptMap[normalPath]) {
			if(self._extRegex.test(pathFromRoot)) {
				obj['path'] = normalPath;
			} else {
				obj['path'] = pathFromRoot + '.js';
			}
			if(type) {
				obj['type'] = type;
			}
			self._clientScripts.push(obj);
			self._clientScriptMap[normalPath] = true;
		}
	}
	
	self.useStyle = function(pathFromRoot, type, rel) {
		var normalPath = self._normalizeURL(pathFromRoot);
		var obj = {};
		if(self._extRegex.test(normalPath)) {
			obj['path'] = normalPath;
		} else {
			obj['path'] = normalPath + '.css';
		}
		
		if(type) {
			obj['type'] = type;
		}
		if(rel) {
			obj['rel'] = rel;
		}
		self._clientStyles.push(obj);
	}
	
	self.useScript(self._refDir + 'libs/jquery.js');
	self.useScript(self._refDir + 'libs/handlebars.js');
	self.useScript(self._refDir + 'libs/json2.js');
	
	self.useScript(self._refDir + 'ncombo-client.js');
	self.useScript(self._refDir + 'core/init.js');
	
	var i, url;
	for(i in self._clientIncludes) {
		url = path.normalize(self._refDir + self._clientIncludes[i]);
		self.useScript(url);
	}
	
	self._setFileResponseHeaders = function(res, filePath, mimeType, forceRefresh) {	
		if(!mimeType) {
			mimeType = mime.lookup(filePath);
		}
		
		if(self._cacheMode && !forceRefresh) {
			var now = new Date();
			var oneMonth = new Date(now.getTime() + self._cacheLife);
			
			res.setHeader('Cache-Control', 'private');
			res.setHeader('Pragma', 'private');
			res.setHeader('Expires', oneMonth.toUTCString());
		} else {
			res.setHeader('Cache-Control', 'no-cache');
			res.setHeader('Pragma', 'no-cache');
		}
		
		res.writeHead(200, {'Content-Type': mimeType});
	}
	
	self._urlToPath = function(url) {
		return self._rootDirPath + url;
	}
	
	self._getScriptCodeTag = function(code, type) {
		if(!type) {
			type = self._defaultScriptType;
		}
		return '<script type="' + type + '">' + code + '</script>';
	}
	
	self._getScriptTag = function(url, type) {
		url = self._normalizeURL(url);
		return '<script type="' + type + '" src="' + url + '"></script>';
	}
	
	self._getStyleTag = function(url, type) {
		url = self._normalizeURL(url);
		var rel = scriptDefObject.rel;
		if(!rel) {
			rel = self._defaultStyleRel;
		}
		return '<link rel="' + rel + '" type="' + type + '" href="' + url + '" />';
	}
	
	self.start = function(port, options) {
		port = parseInt(port);
		
		var dataPort, dataKey;
		
		var release = false;
		var logLevel = 1;
		
		if(options) {
			release = options.release ? true : false;
			if(options.protocol) {
				self._protocol = options.protocol;
			}
			self._protocolOptions = options.protocolOptions;
			
			if(options.logLevel) {
				logLevel = options.logLevel;
			}
		} else {
			options = {};
		}
		
		if(!options.protocol) {
			options.protocol = self._protocol;
		}
		if(!options.protocolOptions) {
			options.protocolOptions = self._protocolOptions;
		}
		options.rootDirPath = self._rootDirPath;
		
		self._router.start(options);
		self._cacheMode = release;
		if(options.cacheLife) {
			self._cacheLife = options.cacheLife;
		}
		
		var secure = false;
		
		if(self._protocol == 'http') {
			self._server = http.createServer(self._routStepper.run);
		} else if(self._protocol == 'https') {
			secure = true;
			if(self._protocolOptions) {
				self._server = https.createServer(self._protocolOptions, self._routStepper.run);
			} else {
				throw "The protocolOptions option must be set when https is used";
			}
		} else {
			throw "The " + self._protocol + " protocol is not supported";
		}
		
		var begin = function() {
			self._io = io.listen(self._server);
			self._io.set('log level', logLevel);
			self._io.set('store', store);
			
			self._dataClient = ndata.createClient(dataPort, dataKey);
			
			self._global = new Global(self._sessionMap, self._dataClient);
		
			gateway.setReleaseMode(release);
			ws.setReleaseMode(release);
		
			self._wsSocks = self._io.of(self._wsEndpoint);
			
			self._wsSocks.on('connection', function(socket) {
		
				self._dataClient.set('__opensockets.' + socket.id, 1);
				
				socket.on('init', function() {
					self._sessionMap[socket.id] = new Session(socket.id, socket, self._dataClient);
				});
				
				// handle server interface call
				socket.on('localCall', function(request) {
					var origin = {address: socket.handshake.address.address, port: port};
					var siReq = new ServerRequest(socket, request, self._sessionMap[socket.id], self._global, origin, secure);
					self._middleware['localCall'].run(siReq);
				});
			
				// handle remote interface call
				socket.on('remoteCall', function(request) {
					var portNum = request.port;
					var origin = {address: socket.handshake.address.address, port: portNum};
					var siReq = new ServerRequest(socket, request, self._sessionMap[socket.id], self._global, origin, request.secure);
					self._middleware['remoteCall'].run(siReq);
				});
			
				socket.on('watchLocal', function(request) {
					var origin = {address: socket.handshake.address.address, port: port};
					var siReq = new ServerRequest(socket, request, self._sessionMap[socket.id], self._global, origin, secure);
					self._middleware['localEvent'].run(siReq);
				});
			
				socket.on('unwatchLocal', function(requests) {
					gateway.unwatch(socket, requests);
				});
			
				socket.on('watchRemote', function(request) {
					var origin = {address: socket.handshake.address.address, port: port};
					var siReq = new ServerRequest(socket, request, self._sessionMap[socket.id], self._global, origin, secure);
					self._middleware['remoteEvent'].run(siReq);
				});
			
				socket.on('unwatchRemote', function(requests) {
					ws.unwatch(requests, socket);
				});
			
				socket.on('disconnect', function() {
					if(self._sessionMap.hasOwnProperty(socket.id)) {
						delete self._sessionMap[socket.id];
					}
					gateway.unwatchAll(socket);
					ws.unwatchAll(socket);
					self._dataClient.remove('__opensockets.' + socket.id);
				});
			});
			
			self._server.on('listening', function() {
				gateway.init(__dirname + '/' + self._config.serverInterfaceDir, self._dataClient, self._privateExtensionRegex);
				process.send({action: 'init'});
			});
			
			self._server.listen(port);
		}
		
		if(cluster.isMaster) {
			portScanner.findAPortNotInUse(port + 1, port + 1000, 'localhost', function(error, datPort) {
				dataPort = datPort;
				var pass = crypto.randomBytes(32).toString('hex');
				
				self._dataServer = ndata.createServer(dataPort, pass);
				self._dataServer.on('ready', function() {
					
					var i;
					var worker = null;
					
					var activeProcesses = 0;
					
					var handler = function(data) {
						if(data.action == 'init') {
							if(worker) {
								worker.removeListener('message', handler);
							}
							
							if(++activeProcesses > numCPUs) {
								console.log('   nCombo server started on port ' + port + ' - Number of workers: ' + numCPUs);
							} else {
								worker = cluster.fork();
								worker.send({action: 'init', dataPort: dataPort, dataKey: pass});
								worker.on('message', handler);
							}
						}
					}
					
					handler({action: 'init'});
				});
			});
		} else {
			var handler = function(data) {
				if(data.action == 'init') {
					process.removeListener('message', handler);
					dataPort = data.dataPort;
					dataKey = data.dataKey;
					begin();
				}
			}
			process.on('message', handler);
		}
	}
	
	self.addMiddleware = function(type, callback) {
		if(!self._middleware.hasOwnProperty(type)) {
			console.log("Middleware type '" + type + "' is invalid");
		}
		
		self._middleware[type].addFunction(callback);
	}
	
	self.removeMiddleware = function(type, callback) {
		if(self._middleware[type].getLength() > 0) {
			self._middleware[type].remove(callback);
		}
	}
	
	self.addRouterMiddleware = function(callback) {
		self.addMiddleware('router', callback);
	}
	
	self.removeRouterMiddleware = function(callback) {
		self.removeMiddleware('router', callback);
	}
	
	self.addLocalCallMiddleware = function(callback) {
		self.addMiddleware('localCall', callback);
	}
	
	self.removeLocalCallMiddleware = function(callback) {
		self.removeMiddleware('localCall', callback);
	}
	
	self.addRemoteCallMiddleware = function(callback) {
		self.addMiddleware('remoteCall', callback);
	}
	
	self.removeRemoteCallMiddleware = function(callback) {
		self.removeMiddleware('remoteCall', callback);
	}
	
	self.addLocalEventMiddleware = function(callback) {
		self.addMiddleware('localEvent', callback);
	}
	
	self.removeLocalEventMiddleware = function(callback) {
		self.removeMiddleware('localEvent', callback);
	}
	
	self.addRemoteEventMiddleware = function(callback) {
		self.addMiddleware('remoteEvent', callback);
	}
	
	self.removeRemoteEventMiddleware = function(callback) {
		self.removeMiddleware('remoteEvent', callback);
	}
})();

module.exports = nCombo;