var fs = require('fs'),
	util = require('util'),
	json = require('ncombo/libs/json2'),
	Stream = require('stream').Stream,
	Buffer = require('buffer').Buffer,
	formidable = require('formidable');

var FileUploader = new (function() {
	var self = this;
	self._options = {
		uploadURL: '/~upload',
		tmpDir: __dirname + '/tmp/',
		uploadDir: __dirname + '/../../../../app/files/',
		maxPostSize: 500000000,
		maxFileSize: 100000000
	}
	
	self._validateFile = function(file) {
		if(self._options.maxFileSize && file.size > self._options.maxFileSize) {
			return false;
		}
		return true;
	}
	
	self._writeFileChunks = function(fd, chunks, index, callback) {
		if(index < chunks.length) {
			fs.write(fd, chunks[index], null, chunks[index].length, null, function() {
				self._writeFileChunks(fd, chunks, index+1, callback);
			});
		} else {
			fs.close(fd);
			callback('{"success": true}');
		}
	}
	
	self.upload = function(req, res, next) {
		if(req.method == 'POST' && req.url == self._options.uploadURL) {
			res.setHeader('Pragma', 'no-cache');
            res.setHeader('Cache-Control', 'no-cache, must-revalidate');
			
			if(req.headers['content-type'] == 'application/octet-stream') {
				var session = req.session;
				var fileName = req.headers['x-file-name'];
				var tempPath = self._options.tmpDir + '/' + fileName;
				var buf = [];
				
				var ended = false;
				var bytesLoaded = 0;
				var bytesTotal = parseInt(req.headers['content-length']);
				
				var progressHandler = function(chunk) {
					buf.push(chunk);
					bytesLoaded += chunk.length;
					
					session.emit('uploadprogress', {bytesLoaded: bytesLoaded, bytesTotal: bytesTotal});
				}
				
				req.on('data', progressHandler);
				
				var endFunc = function() {
					ended = true;
				}
				
				req.on('end', endFunc);
				
				var uploadPath;
				if(req.uploadPath) {
					uploadPath = req.uploadPath;
				} else {
					uploadPath = self._options.uploadDir + fileName;
				}
				
				var fd;
				
				var finish = function() {
					req.removeListener('end', finish);
					req.removeListener('data', progressHandler);
					self._writeFileChunks(fd, buf, 0, function(result) {
						fs.rename(tempPath, uploadPath);
						res.end(result);
						session.emit('uploadcomplete');
					});
				}
				
				fs.open(tempPath, 'w+', function(err, fileDesc) {
					if(ended) {
						fd = fileDesc;
						finish();
					} else {
						fd = fileDesc;
						req.removeListener('end', endFunc);
						req.on('end', finish);
					}
				});
			} else if(/^multipart\/form-data;/.test(req.headers['content-type'])) {
				var session = req.session;
				
				var form = new formidable.IncomingForm();
				var finished = false;
				
				form.on('progress', function(bytesReceived, bytesExpected) {
					session.emit('uploadprogress', {bytesLoaded: bytesReceived, bytesTotal: bytesExpected});
				});
				
				var setFinish = function() {
					finished = true;
				}
				
				form.on('end', setFinish);
				
				var finish = function(tempPath, uploadPath) {
					finished = true;
					fs.rename(tempPath, uploadPath);
					res.end('{"success": true}');
					session.emit('uploadcomplete');
				}
				
				form.parse(req, function(err, fields, files) {
					var qqFile = files.qqfile;
					var fileName = qqFile.name;					
					
					var uploadPath;
					if(req.uploadPath) {
						uploadPath = req.uploadPath;
					} else {
						uploadPath = self._options.uploadDir + fileName;
					}
					
					var tempPath = qqFile.path;
					
					var ended = false;
					
					var onFinish = function() {
						form.removeListener('end', onFinish);
						finish(tempPath, uploadPath);
					}
					
					form.removeListener('end', setFinish);
					if(finished) {
						finish(tempPath, uploadPath);
					} else {
						form.on('end', onFinish);
					}
				});
			} else {
				res.end('{"success": false}');
			}
		} else {
			next(req, res);
		}
	}
})();

module.exports = FileUploader;