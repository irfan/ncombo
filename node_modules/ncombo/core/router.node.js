var fs = require('fs'),
	path = require('path'),
	mime = require('mime'),
	handlebars = require('../libs/handlebars'),
	less = require('less');

var Router = new (function() {
	var self = this;
	self._privateExtension = /$a/;
	self._rootTemplate = null;
	self._defaultRootDir = __dirname + '/../../../';
	self._defaultScriptType = 'text/javascript';
	self._defaultStyleType = 'text/css';
	self._defaultStyleRel = 'stylesheet';
	self._rootDir = self._defaultRootDir;
	self._clientScriptMap = {};
	self._clientScripts = [];
	self._clientStyles = [];
	self._initializeCallbacks = [];
	self._protocol = 'http';
	self._wsEndpoint = null;
	self._extRegex = /[.][^\/\\]*$/;
	
	self._cache = false;
	self._cacher = {};
	
	mime.define({
		'text/css': ['less'],
		'text/html': ['handlebars']
	});
	
	self.setRootTemplate = function(fileURL) {
		self._rootTemplate = fileURL;
	}
	
	self.getRootTemplate = function() {
		return self._rootTemplate;
	}
	
	self.cacheResponses = function(bool) {
		self._cache = bool;
	}
	
	self._cacheAndRespond = function(res, filePath, data) {
		if(self._cache) {
			self._cacher[filePath] = data;
		}
		
		if(res.writable) {
			res.end(data);
		}
	}
	
	self._setResponseHeaders = function(res, filePath) {
		var mimeType = mime.lookup(filePath);
		
		if(self._cache) {
			var now = new Date();
			var oneMonth = new Date(now.getTime() + 2592000000);
			
			res.setHeader('Cache-Control', 'public');
			res.setHeader('Pragma', 'public');
			res.setHeader('Expires', oneMonth.toUTCString());
		} else {
			res.setHeader('Cache-Control', 'no-cache');
			res.setHeader('Pragma', 'no-cache');
		}
		
		res.writeHead(200, {'Content-Type': mimeType});
	}
	
	self.rout = function(req, res) {
		if(/\/$/.test(req.url)) {
			req.url = self._rootTemplate;
		}
		
		if(/(\/[^.\/]+|^[^\/.]*)$/.test(req.url)) {
			self._redirect(req, res, req.url + '/');
		} else {
			var filePath = path.resolve(self._rootDir) + req.url;
			
			if(self._privateExtension && self._privateExtension.test(req.url)) {
				res.writeHead(403);
				res.end('Request ' + req.url + ' refers to a private resource which cannot be accessed directly');
			} else {
				if(self._cache && self._cacher.hasOwnProperty(filePath)) {
					self._setResponseHeaders(res, filePath);
					if(res.writable) {
						res.end(self._cacher[filePath]);
					}
				} else {
					fs.readFile(filePath, function(err, data) {
						if(err) {
							if(err.code == 'ENOENT') {
								res.writeHead(404);
								res.end('Resource ' + req.url + ' could not be found');
							} else {
								res.writeHead(500);
								res.end('Could not access ' + req.url);
							}
						} else {
							var ext = filePath.match(self._extRegex);
							ext = ext ? ext[0] : '';
							
							self._setResponseHeaders(res, filePath);
							
							if(req.url == self._rootTemplate) {
								self._triggerInitialize(req, res);
								
								var includeString = '';
								
								includeString += self._getStyleTag({path: './node_modules/ncombo/styles/ncombo.css', type: 'text/css', rel: 'stylesheet'}, req) + "\n";
								includeString += self._getScriptTag({path: './node_modules/ncombo/loader.js', type: 'text/javascript'}, req);
								
								var frameworkURL = self._pathToURL('./node_modules/ncombo/', req);
								var routToScriptURL = self._pathToURL('./app/scripts/index.js', req);
								var loadScriptURL = self._pathToURL('./node_modules/ncombo/scripts/load.js', req);
								
								var appDef = {};
								appDef.frameworkURL = frameworkURL;
								appDef.jsLibsURL = self._pathToURL('./node_modules/ncombo/libs/', req);
								appDef.frameworkStylesURL = self._pathToURL('./node_modules/ncombo/styles/', req);
								appDef.appScriptsURL = self._pathToURL('./app/scripts/', req);
								appDef.appStylesURL = self._pathToURL('./app/styles/', req);
								appDef.appTemplatesURL = self._pathToURL('./app/templates/', req);
								appDef.appAssetsURL = self._pathToURL('./app/assets/', req);
								appDef.appFilesURL = self._pathToURL('./app/files/', req);
								appDef.wsEndpoint = self._wsEndpoint;
								
								var resources = [];
								var resourceProps = {};
								
								var len = self._clientStyles.length;
								var i, j, url, cur, count;
								for(i=0; i<len; i++) {
									cur = self._clientStyles[i];
									url = self._pathToURL(cur.path, req);
									resources.push(url);
									resourceProps[url] = {};
									count = 0;
									for(j in cur) {
										if(j != 'path') {
											resourceProps[url][j] = cur[j];
											count++;
										}
									}
									if(count == 0) {
										delete resourceProps[url];
									}
								}
								
								var len = self._clientScripts.length;
								for(i=0; i<len; i++) {
									cur = self._clientScripts[i];
									url = self._pathToURL(cur.path, req);
									resources.push(url);
									resourceProps[url] = {};
									count = 0;
									for(j in cur) {
										if(j != 'path') {
											resourceProps[url][j] = cur[j];
											count++;
										}
									}
									if(count == 0) {
										delete resourceProps[url];
									}
								}
								
								var resString = JSON.stringify(resources);
								var resPropString = JSON.stringify(resourceProps);
								
								var appString = JSON.stringify(appDef);
								
								var loaderCode = '$loader.init("' + frameworkURL + '","' + routToScriptURL + '","' +
										loadScriptURL + '",' + resString + ',' + resPropString + ',' + appString + ',false);';
								
								includeString += self._getScriptCodeTag(loaderCode);
								
								var template = handlebars.compile(data.toString());
								var html = template({includes: new handlebars.SafeString(includeString)});
								
								self._cacheAndRespond(res, filePath, html);
							} else if(ext == '.less') {
								less.render(data.toString(), function (e, css) {
									self._cacheAndRespond(res, filePath, css);
								});
							} else {
								self._cacheAndRespond(res, filePath, data);
							}
						}
					});
				}
			}
		}
	}
	
	self.includeClientScript = function(pathFromRoot, type) {
		var normalPath = path.normalize(pathFromRoot);
		var obj = {};
		if(!self._clientScriptMap[normalPath]) {
			if(self._extRegex.test(pathFromRoot)) {
				obj['path'] = normalPath;
			} else {
				obj['path'] = pathFromRoot + '.js';
			}
			if(type) {
				obj['type'] = type;
			}
			self._clientScripts.push(obj);
			self._clientScriptMap[normalPath] = true;
		}
	}
	
	self.includeClientStyle = function(pathFromRoot, type, rel) {
		var obj = {};
		if(self._extRegex.test(pathFromRoot)) {
			obj['path'] = pathFromRoot;
		} else {
			obj['path'] = pathFromRoot + '.css';
		}
		
		if(type) {
			obj['type'] = type;
		}
		if(rel) {
			obj['rel'] = rel;
		}
		self._clientStyles.push(obj);
	}
	
	self._pathToURL = function(pathFromRoot, req) {
		var host = req.headers.host;
		
		var url = self._protocol + '://' + (path.normalize(host + '/' + pathFromRoot)).replace(/\\/g, '/');
		return url;
	}
	
	self._getScriptCodeTag = function(code, type) {
		if(!type) {
			type = self._defaultScriptType;
		}
		return '<script type="' + type + '">' + code + '</script>';
	}
	
	self._getScriptTag = function(scriptDefObject, req) {
		var url = self._pathToURL(scriptDefObject.path, req);
		return '<script type="' + scriptDefObject.type + '" src="' + url + '"></script>';
	}
	
	self._getStyleTag = function(scriptDefObject, req) {
		var url = self._pathToURL(scriptDefObject.path, req);
		rel = scriptDefObject.rel;
		if(!rel) {
			rel = self._defaultStyleRel;
		}
		return '<link rel="' + rel + '" type="' + scriptDefObject.type + '" href="' + url + '" />';
	}
	
	self._redirect = function(req, res, url) {
		res.writeHead(301, {'Location': self._protocol + '://' + req.headers.host + url});
		res.end();
	}
	
	self.setPrivateExtensionRegex = function(regex) {
		if(!regex.test) {
			throw 'Exception: Specified regex is not a valid RegExp object';
		}
		self._privateExtension = regex;
		return self;
	}
	
	self.setRootDirectory = function(rootDirectory) {
		self._rootDir = rootDirectory;
	}
	
	self.setProtocol = function(protocol) {
		self._protocol = protocol;
	}
	
	self.setWSEndpoint = function(endpointName) {
		self._wsEndpoint = endpointName;
	}
	
	self.initialize = function(callback) {
		self._initializeCallbacks.push(callback);
	}
	
	self._triggerInitialize = function(req, res) {
		var i;
		var len = self._initializeCallbacks.length;
		for(i=0; i<len; i++) {
			self._initializeCallbacks[i](req, res);
		}
	}
	
	self.uninitialize = function(callback) {
		var newList = [];
		var len = self._initializeCallbacks.length;
		var i;
		for(i=0; i<len; i++) {
			if(self._initializeCallbacks[i] != callback) {
				newList.push(self._initializeCallbacks[i]);
			}
		}
		self._initializeCallbacks = newList;
	}
})();

module.exports = Router;