var fs = require('fs'),
	path = require('path'),
	mime = require('mime'),
	less = require('less'),
	wrench = require('wrench'),
	jsp = require("uglify-js").parser,
	pro = require("uglify-js").uglify,
	cache = require('ncombo/core/cache');

var Router = new (function() {
	var self = this;
	self._privateExtension = /$a/;
	self._extRegex = /[.][^\/\\]*$/;
	self._defaultRootDir = __dirname + '/../../../../';
	
	self._options = {};
	self._rootDirPath = self._defaultRootDir;
	self._protocol = 'http';
	self._releaseMode = false;
	self._cacheLife = 2592000000;
	self._cacheType = 'private';
	
	self._cacheAndRespond = function(res, filePath, data) {
		if(self._releaseMode) {
			cache.setFile(filePath, data);
		}
		
		if(!res.finished) {
			res.end(data);
		}
	}
	
	self._urlToPath = function(url) {
		url = url.replace(/\?.*/, '');
		return path.normalize(self._rootDirPath + url);
	}
	
	self._setFileResponseHeaders = function(res, filePath) {	
		var mimeType = mime.lookup(filePath);
		
		if(self._releaseMode) {
			var now = new Date();
			var oneMonth = new Date(now.getTime() + self._cacheLife);
			
			res.setHeader('Cache-Control', self._cacheType);
			res.setHeader('Pragma', self._cacheType);
			res.setHeader('Expires', oneMonth.toUTCString());
		} else {
			res.setHeader('Pragma', 'no-cache');
			res.setHeader('Cache-Control', 'no-cache, must-revalidate');
		}
		
		res.writeHead(200, {'Content-Type': mimeType});
	}
	
	self.getOptions = function() {
		return self._options;
	}
	
	self.start = function(options) {
		if(options) {
			self._options = options;
			self._releaseMode = self._options.release ? true : false;
			
			if(self._releaseMode) {
				if(self._options.autoMinify && self._options.minifyDirURLs) {
					var i, j, url, dir, files, filePath, data, ext, ast, ugly;
					for(i in self._options.minifyDirURLs) {
						url = self._options.minifyDirURLs[i];
						dir = self._urlToPath(url);
						files = wrench.readdirSyncRecursive(dir);
						for(j in files) {
							filePath = path.normalize(dir + files[j]);
							ext = filePath.match(self._extRegex);
							ext = ext ? ext[0] : '';
							if(ext == '.js') {
								data = fs.readFileSync(filePath);
								ast = jsp.parse(data.toString());
								ast = pro.ast_mangle(ast);
								ast = pro.ast_squeeze(ast);
								ugly = pro.gen_code(ast);
								
								cache.setFile(filePath, ugly);
							}
						}
					}
				}
			}
			
			if(self._options.cacheLife) {
				self._cacheLife = self._options.cacheLife;
			}
			if(self._options.cacheType) {
				self._cacheType = self._options.cacheType;
			}
			if(self._options.protocol) {
				self._protocol = self._options.protocol;
			}
			if(self._options.privateExtensionRegex) {
				self._privateExtension = self._options.privateExtensionRegex;
			}
			if(self._options.rootDirPath) {
				self._rootDirPath = self._options.rootDirPath;
			}
		}
	}
	
	self.rout = function(req, res) {	
		var filePath = self._urlToPath(req.url);
		
		if(self._privateExtension && self._privateExtension.test(req.url)) {
			res.writeHead(403);
			res.end('Request ' + req.url + ' refers to a private resource which cannot be accessed directly');
		} else {
			if(self._releaseMode && cache.hasFile(filePath)) {
				self._setFileResponseHeaders(res, filePath);
				if(!res.finished) {
					res.end(cache.getFile(filePath));
				}
			} else {
				fs.readFile(filePath, function(err, data) {
					if(err) {
						if(err.code == 'ENOENT') {
							res.writeHead(404);
							res.end('Resource ' + req.url + ' could not be found');
						} else {
							res.writeHead(500);
							res.end('Could not access ' + req.url);
						}
					} else {
						var ext = filePath.match(self._extRegex);
						ext = ext ? ext[0] : '';
						
						self._setFileResponseHeaders(res, filePath);
						if(ext == '.less') {
							less.render(data.toString(), function (e, css) {
								self._cacheAndRespond(res, filePath, css);
							});
						} else {
							self._cacheAndRespond(res, filePath, data);
						}
					}
				});
			}
		}
	}
	
	self._redirect = function(req, res, url) {
		res.writeHead(301, {'Location': self._protocol + '://' + req.headers.host + url});
		res.end();
	}
})();

module.exports = Router;