var fork = require('child_process').fork;
var EventEmitter = require('events').EventEmitter;
var net = require('net');
var formatter = require('./formatter');

var DEFAULT_PORT = 9435;
var HOST = '127.0.0.1';

var Server = function(port) {
	var self = this;
	self._server = fork(__dirname + '/server.js', [port]);
	self._eventer = new EventEmitter();
	
	self.on = function(event, listener) {
		self._eventer.on(event, listener);
	}
	
	self.removeListener = function(event, listener) {
		self._eventer.removeListener(event, listener);
	}
	
	self._server.on('message', function(value) {
		if(value.event == 'listening') {
			self._eventer.emit('ready');
		}
	});
}

module.exports.createServer = function(port) {
	if(!port) {
		port = DEFAULT_PORT;
	}
	return new Server(port);
}

var Client = function(port, host) {
	var self = this;
	self._chanelWatchers = {};
	self._eventer = new EventEmitter();
	self._commandMap = {};
	
	self._socket = new net.Socket();
	
	self._curID = 1;
	self._genID = function() {
		return self._curID++;
	}
	
	self._broadcast = function(event, value) {
		if(self._chanelWatchers.hasOwnProperty(event)) {
			var watchers = self._chanelWatchers[event];
			var i;
			for(i in watchers) {
				watchers[i](value);
			}
		}
	}
	
	self._socket.connect(port, host, function() {
		self._eventer.emit('ready');
	});
	
	self._socket.on('data', function(responseBuffer) {
		var responses = formatter.parse(responseBuffer);
		var i, response, id, action;
		for(i in responses) {
			response = responses[i];
			id = response.id;
			if(response.type == 'response') {
				if(self._commandMap.hasOwnProperty(id)) {
					action = response.action;
					if(response.value) {
						self._commandMap[id].callback(response.value);
					} else if(action == 'subscribe' || action == 'unsubscribe') {
						if(response.success) {
							self._commandMap[id].callback(response.event);
						}
					} else if(self._commandMap[id].callback) {
						self._commandMap[id].callback();
					}
					delete self._commandMap[id];
				}
			} else if(response.type == 'event') {
				self._broadcast(response.event, response.value);
			}
		}
	});
	
	self._exec = function(command, callback) {
		if(callback) {
			self._commandMap[command.id] = {callback: callback, command: command};
		}
		
		self._socket.write(formatter.stringify(command));
	}
	
	self.on = function(event, listener) {
		self._eventer.on(event, listener);
	}

	self.removeListener = function(event, listener) {
		self._eventer.removeListener(event, listener);
	}

	self._subscribe = function(event) {
		var command = {
			id: self._genID(),
			action: 'subscribe',
			event: event	
		}
		var callback = function() {
			self._eventer.emit('subscribe');
		}
		
		self._exec(command, callback);
	}
	
	self._isEmpty = function(object) {
		var i;
		var empty = true;
		for(i in object) {
			empty = false;
			break;
		}
		return empty;
	}
	
	self._unsubscribe = function(event) {
		var command = {
			id: self._genID(),
			action: 'unsubscribe',
			event: event	
		}
		var callback = function() {
			self._eventer.emit('unsubscribe');
		}
		
		self._exec(command, callback);
	}
	
	self.watch = function(event, callback) {
		if(!self._chanelWatchers[event]) {
			self._chanelWatchers[event] = [];
		}
		self._subscribe(event);
		
		self._chanelWatchers[event].push(callback);
	}
	
	self.watchOnce = function(event, callback) {
		if(!self._chanelWatchers[event]) {
			self._chanelWatchers[event] = [];
			self._subscribe(event);
			self._chanelWatchers[event].push(callback);
		}
	}
	
	self.unwatch = function(event, callback) {
		if(event) {
			if(self._chanelWatchers.hasOwnProperty(event)) {
				if(callback) {
					var newWatchers = [];
					var watchers = self._chanelWatchers[event];
					var i;
					for(i in watchers) {
						if(watchers[i] != callback) {
							newWatchers.push(watchers[i]);
						}
					}
					self._chanelWatchers[event] = newWatchers;
				} else {
					delete self._chanelWatchers[event];
				}
			}
			if(self._isEmpty(self._chanelWatchers)) {
				self._unsubscribe(event);
			}
		} else {
			self._chanelWatchers = {};
			self._unsubscribe();
		}
	}

	self.emit = function(event, value) {
		var command = {
			id: self._genID(),
			action: 'emit',
			event: event,
			value: value	
		}
		
		self._exec(command);
	}
	
	self.set = function(key, value, callback) {
		var command = {
			id: self._genID(),
			action: 'set',
			key: key,
			value: value
		}
		self._exec(command, callback);
	}
	
	self.add = function(key, value, callback) {
		var command = {
			id: self._genID(),
			action: 'add',
			key: key,
			value: value
		}
		self._exec(command, callback);
	}
	
	self.remove = function(key, callback) {
		var command = {
			id: self._genID(),
			action: 'remove',
			key: key
		}
		self._exec(command, callback);
	}
	
	self.removeAll = function(callback) {
		var command = {
			id: self._genID(),
			action: 'removeAll'
		}
		self._exec(command, callback);
	}
	
	self.pop = function(key, callback) {
		var command = {
			id: self._genID(),
			action: 'pop',
			key: key
		}
		self._exec(command, callback);
	}

	self.get = function(key, callback) {
		var command = {
			id: self._genID(),
			action: 'get',
			key: key	
		}
		self._exec(command, callback);
	}
	
	self.getAll = function(callback) {
		var command = {
			id: self._genID(),
			action: 'getAll'
		}
		self._exec(command, callback);
	}
}

module.exports.createClient = function(port) {
	if(!port) {
		port = DEFAULT_PORT;
	}
	
	return new Client(port, HOST);
}
