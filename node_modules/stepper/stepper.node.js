var RunThread = function(settings) {
	var self = this;
	self._c = 0;
	
	self._functions = (settings.functions instanceof Array) ? settings.functions : [];
	self._chain = settings.chain;
	self._startArgs = [];
	self._tail = settings.tail;
	self._validator = settings.validator;
	
	self.getLength = function() {
		return self._functions.length;
	}
	
	self.run = function() {
		self._c = 0;
		
		var i;
		self._startArgs = [];
		var len = arguments.length;
		
		for(i=0; i<len; i++) {
			self._startArgs.push(arguments[i]);
		}
		
		if(!self._validator || self._validator.apply(null, self._startArgs)) {
			self._next.apply(self._next, self._startArgs);
		}
	}
	
	self._next = function() {
		var args;
		if(self._chain) {
			args = [];
			var i;
			var len = arguments.length;
			
			for(i=0; i<len; i++) {
				args.push(arguments[i]);
			}
		} else {
			args = self._startArgs.concat();
		}
		args.push(self._next);
		
		if(!self._chain || !self._validator || self._validator.apply(null, arguments)) {
			if(self._c < self._functions.length) {
				self._functions[self._c++].apply(self._next, args);
			} else if(self._c++ == self._functions.length && self._tail) {
				if(self._chain) {
					if(self._tail instanceof Stepper) {
						self._tail.run.apply(self._tail._next, arguments);
					} else {
						self._tail.apply(self._next, args);
					}
				} else {
					if(self._tail instanceof Stepper) {
						self._tail.run.apply(self._tail._next, self._startArgs);
					} else {
						self._tail.apply(self._next, self._startArgs);
					}
				}
			}
		}
	}
}

var Stepper = function(functions, chain) {
	var self = this;
	self._c = 0;
	
	self._functions = (functions instanceof Array) ? functions : [];
	self._chain = chain;
	self._startArgs = [];
	self._tail = null;
	self._validator = null;
	
	self.addFunction = function(func) {
		self._functions.push(func);
	}
	
	self.setTail = function(tail) {
		self._tail = tail;
	}
	
	self.setValidator = function(func) {
		self._validator = func;
	}
	
	self.getLength = function() {
		return self._functions.length;
	}
	
	self.remove = function(func) {
		var newList = [];
		var i;
		var len = self._functions.length;
		for(i=0; i<len; i++) {
			if(self._functions[i] != func) {
				newList.push(self._functions[i]);
			}
		}
		self._functions = newList;
	}
	
	self.setFunctions = function(functions) {
		self._functions = (functions instanceof Array) ? functions : [];
	}
	
	self.chain = function(bool) {
		if(bool === undefined) {
			return self._chain;
		}
		self._chain = bool;
	}
	
	self.run = function() {
		var settings = {
			functions: self._functions,
			chain: self._chain,
			tail: self._tail,
			validator: self._validator
		};
	
		var rt = new RunThread(settings);
		rt.run.apply(rt, arguments)
	}
}

module.exports.chain = function() {
	var args = [];
	var i;
	for(i in arguments) {
		args.push(arguments[i]);
	}
	var stepper = new Stepper(args, true);
	stepper.run();
}

module.exports.create = function(functions, chain) {
	return new Stepper(functions, chain);
}
