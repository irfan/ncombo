var fs = require('fs');
var path = require('path');
var EventEmitter = require('events').EventEmitter;
var chokidar = require('chokidar');

module.exports = function(options) {
	var self = new EventEmitter();
	
	var windowsSepRegex = /\\/g;
	var styleExtRegex = /[.](css|less)$/;
	var importRegex = /@import +(url *[(])?["']?([^"']+)["']?[)]?;?(\r?\n)?/g;
	var urlRegex = /([^A-Za-z0-9]|^)url[(][ ]*["']?([^"')]*)["']?[ ]*[)]/g;
	var subs = {};
	var files = options.files;
	var watch = options.watch;
	
	if(watch) {
		var emitBundle = function() {
			self.emit('bundle');
		}
		var watcher = chokidar.watch(files);
		watcher.on('change', emitBundle);
		watcher.on('unlink', emitBundle);
	}
	
	self.removeComments = function(css) {
		css = css.split('');
		var num = css.length;
		var capturing = true;
		var buf = '';
		
		var i;
		for(i=0; i<num; i++) {
			if(css[i] == '/' && css[i+1] == '*') {
				capturing = false;
			} else if(css[i] == '*' && css[i+1] == '/') {
				capturing = true;
				i += 2;
			}
			if(i >= num) {
				break;
			}
			if(capturing) {
				buf += css[i];
			}
		}
		return buf;
	}
	
	self._toUnixSep = function(filePath) {
		return filePath.replace(windowsSepRegex, '/');
	}
	
	self._subImportedPaths = function(filePath, content, urlTransformFunction, rootDir, subFunction) {
		var pathAdjust, adjustedPath;
		
		content = content.replace(urlRegex, function(match, first, second) {
			pathAdjust = path.relative(rootDir, path.dirname(filePath));
			if(pathAdjust) {
				pathAdjust += '/';
			}
			adjustedPath = self._toUnixSep(path.normalize(pathAdjust + second));
			if(urlTransformFunction && !styleExtRegex.test(adjustedPath)) {
				adjustedPath = urlTransformFunction(adjustedPath, rootDir);
			}
			return first + 'url("' + adjustedPath + '")';
		});
		
		content = content.replace(importRegex, function(match, first, second) {
			if(subs.hasOwnProperty(second)) {
				return '';
			} else {
				subs[second] = true;
				return subFunction(second, urlTransformFunction, rootDir);
			}
		});
		
		return content;
	}
	
	self._inlineImports = function(filePath, urlTransformFunction, rootDir) {
		if(rootDir) {
			filePath = path.normalize(rootDir + '/' + filePath);
		} else {
			subs = {};
			rootDir = path.normalize(path.dirname(filePath));
		}
		var content = self.removeComments(fs.readFileSync(filePath, 'utf8'));
		
		return self._subImportedPaths(filePath, content, urlTransformFunction, rootDir, self._inlineImports);
	}
	
	self.bundle = function(urlTransformFunction) {
		if(!(files instanceof Array)) {
			files = [files];
		}
		var content = [];
		
		var i, file;
		for(i in files) {
			file = files[i];
			content.push(self._inlineImports(file, urlTransformFunction));
		}
		
		subs = {};
		return content.join('\n');
	}
	
	return self;
}